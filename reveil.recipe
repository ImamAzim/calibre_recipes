#!/usr/bin/env python
# vim:fileencoding=utf-8

from calibre.web.feeds.news import BasicNewsRecipe
import re

class AdvancedUserRecipe1667902828(BasicNewsRecipe):
    title          = 'reveil'
    language = 'fr'

    index_url = 'https://www.courrierinternational.com/feed/all/rss.xml'
    no_stylesheets = True
    auto_cleanup   = False

    keep_only_tags = [
        dict(name='div', attrs={'class': 'article-heading'}),
        dict(name='p', attrs={'class': 'article-lede'}),
        dict(name='div', attrs={'class': 'article-metas'}),
        dict(name='div', attrs={'class': 'article-content'}),
        dict(name='p', attrs={'class': 'article-authors'}),
        dict(name='div', attrs={'class': 'article-box-source'}),
    ]
    remove_tags = [
        dict(name='div', attrs={'class': 'article-tools'}),
        dict(name='div', attrs={'class': 'tools-list'}),
        dict(name='div', attrs={'class': 'article-readmore'}),
        dict(name='div', attrs={'class': 'tags-list'}),
        dict(name='div', attrs={'class': 'tags-list'}),
        dict(name='a', attrs={'class': 'source-link'}),
        dict(name='p', attrs={'class': 'article-vo'}),
        dict(name='section', attrs={'class': 'ci-services services-left'}),
    ]

    needs_subscription = True
    login_url = 'https://www.courrierinternational.com/login'

    def get_browser(self):
        def is_form_login(form):
            return "id" in form.attrs and form.attrs['id'] == "user-login-form"
        br = BasicNewsRecipe.get_browser(self)
        if self.username:
            br.open(self.login_url)
            br.select_form(predicate=is_form_login)
            br['name'] = self.username
            br['pass'] = self.password
            br.submit()
        return br

    def parse_index(self):
        raw_soup = self.index_to_soup(self.index_url, raw=True)
        soup = BeautifulSoup(raw_soup, 'xml')

        articles = list()

        for div in soup.find_all('item'):
            date_text=div.find('pubDate').text.strip()[0:-6]
            date = dateutil.parser.parse(date_text)
            article_age = datetime.datetime.now()-date
            if article_age.days <= self.oldest_article:
                article_type = div.find('article-type').text
                if article_type not in self.exclude_article_type:
                    title = div.title.text
                    description=div.find('description').text
                    url=div.find('link').text
                    article = dict(
                            title=title,
                            url=url,
                            date=date_text,
                            description=description,
                            )
                    articles.append(article)
        feeds = [('Articles', articles)]
